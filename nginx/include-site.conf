{% set profile = settings.get('profile') -%}

{% if profile == 'django' %}

{% set has_ftp = settings.get('ftp', False) -%}
{% set locations = settings.get('locations', {}) -%}
{% set redirect = settings.get('redirect', None) -%}
{% set extra_server_name = settings.get('extra_server_name', None) -%}
{% set ssl = settings.get('ssl', None) -%}
{% set letsencrypt = settings.get('letsencrypt', False) -%}
{% set testing = settings.get('testing', False) -%}

{% if redirect -%}
server {
    listen 80;
    server_name {{ redirect }};
    {% if ssl -%}
    return 301 https://{{ domain }}$request_uri;
    {% else -%}
    return 301 $scheme://{{ domain }}$request_uri;
    {% endif -%}
}
{% endif -%}

{% if ssl -%}
server {
    listen 80;
    server_name {{ domain }}{% if extra_server_name %} {{ extra_server_name }}{% endif %};
    return 301 https://$host$request_uri;
}

{% if redirect -%}
server {
    listen 443 ssl;
    server_name {{ redirect }};
    {% if letsencrypt -%}
    ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
    {% else -%}
    ssl_certificate /srv/ssl/{{ domain }}/ssl-unified.crt;
    ssl_certificate_key /srv/ssl/{{ domain }}/server.key;
    {% endif -%}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    return 301 $scheme://{{ domain }}$request_uri;
}
{% endif -%}
{% endif -%}

server {
    client_max_body_size 20m;
    {% if ssl -%}
    listen 443 ssl;
    {% else -%}
    listen 80;
    {% endif -%}

    server_name {{ domain }}{% if extra_server_name %} {{ extra_server_name }}{% endif %};
    root   /home/web/repo/files/{{ domain }};

    {% if ssl -%}
    {% if letsencrypt -%}
    ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
    {% else -%}
    ssl_certificate /srv/ssl/{{ domain }}/ssl-unified.crt;
    ssl_certificate_key /srv/ssl/{{ domain }}/server.key;
    {% endif -%}
    {% include 'nginx/jinja-include-ssl.conf' %}
    {% endif -%}

    location ~ /.well-known {
        allow all;
    }

    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    {% for comment, location_settings in locations.iteritems() -%}
    location {{ location_settings['location'] }} {
        alias {{ location_settings.get('alias') }};
    }
    {% endfor -%}

    {% if has_ftp -%}
    location /fs {
        alias /home/web/repo/ftp/{{ domain }}/site/static/;
    }
    {% endif -%}

    location /media {
        alias /home/web/repo/files/{{ domain }}/public/;
    }

    location /private/ {
        internal;
    }

    location /robots.txt {
        {% if testing -%}
        alias /home/web/repo/files/{{ domain }}/deny-robots.txt;
        {% else -%}
        alias /home/web/repo/project/{{ domain }}/live/web_static/robots.txt;
        {% endif -%}
    }

    location ~ ^/favicon.(\w*)$ {
        alias /home/web/repo/project/{{ domain }}/live/web_static/ico/favicon.$1;
    }

    location /static {
        alias /home/web/repo/project/{{ domain }}/live/web_static/;
    }

    location / {
        if (-f $document_root/maintenance.html) {
            return 503;
        }
        include          uwsgi_params;
        {% if ssl -%}
        uwsgi_param      UWSGI_SCHEME https;
        {% endif -%}
        uwsgi_pass       127.0.0.1:{{ settings['uwsgi_port'] }};
    }

    error_page 503 @maintenance;
    location @maintenance {
        rewrite ^(.*)$ /maintenance.html break;
    }
}
{% endif -%}

{% if profile == 'mattermost' %}

{# copied from: #}
{# https://docs.mattermost.com/install/install-ubuntu-1604.html#configuring-nginx-as-a-proxy-for-mattermost-server #}

upstream backend {
    server 10.10.10.2:8065;
}

proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off;

server {

    {% if ssl -%}
    listen 443 ssl http2;
    {% else -%}
    listen 80;
    {% endif -%}

    server_name    {{ domain }};

    {% if ssl -%}
    ssl on;
    ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
    {% endif %}

    location /api/v3/users/websocket {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        client_max_body_size 50M;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Frame-Options SAMEORIGIN;
        proxy_buffers 256 16k;
        proxy_buffer_size 16k;
        proxy_read_timeout 600s;
        proxy_pass http://backend;
    }

    location / {
        client_max_body_size 50M;
        proxy_set_header Connection "";
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Frame-Options SAMEORIGIN;
        proxy_buffers 256 16k;
        proxy_buffer_size 16k;
        proxy_read_timeout 600s;
        proxy_cache mattermost_cache;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 2;
        proxy_cache_use_stale timeout;
        proxy_cache_lock on;
        proxy_pass http://backend;
    }
}

{% endif -%}

{# PHP sites #}
{% if profile == 'php' %}
server {
    # {{ domain }}
    listen 80;
    server_name {{ domain }};
    root   /home/web/repo/project/{{ domain }}/live;
    index index.php;

    # serve static files directly
    location ~* ^.+.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt)$ {
        access_log        off;
        expires           max;
    }

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php5-fpm-{{ domain }}.socket;
        fastcgi_index index.php;
        include fastcgi_params;
    }
}
{% endif -%}
